[BITS 16]

start:
    ; Set video mode 13h (320x200, 256 colors)
    mov ax, 0x0013
    int 0x10

    ; Set ES to VGA memory, DS to segment containing data
    mov ax, 0xA000
    mov es, ax
    mov ax, 0x2000
    mov ds, ax

    ; SI points to message, BX = row/col
    mov si, message
    xor bx, bx        ; BH = row, BL = column (in character units)
    call draw_string

    ; Wait for keypress
    xor ah, ah
    int 0x16

    ; Return to caller
    retf

; ---------------------------------------
; Message to display
; ---------------------------------------
message db 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 this is super skibidi grimace shake', 0

; ---------------------------------------
; Draw null-terminated string from DS:SI
; BX = BH: row (Y), BL: col (X), both in char units (8px steps)
; ---------------------------------------
draw_string:
    pusha
.next_char:
    lodsb
    or al, al
    jz .done

    cmp al, 32
    jb .skip
    cmp al, 126
    ja .skip

    push si
    push bx
    call draw_char
    pop bx
    pop si

.skip:
    inc bl
    cmp bl, 40         ; 40 chars per row (320 / 8)
    jb .next_char

    mov bl, 0          ; Reset column
    add bh, 5
    cmp bh, 200         ; Max 25 rows (200 / 8)
    jae .done
    jmp .next_char

.done:
    popa
    ret


draw_char:
    pusha

    ; Convert char to font offset: (AL - 32) * 8
    sub al, 32
    movzx si, al
    shl si, 3
    add si, font8x8

    ; Convert char col (BL) and row (BH) to pixel coordinates
    movzx ax, bl
    shl ax, 3          ; AX = column in pixels (X)
    movzx dx, bh
    shl dx, 3          ; DX = row in pixels (Y)

    ; Compute initial DI = Y * 320 + X
    mov di, dx
    shl dx, 6          ; DX = Y * 64
    shl di, 2          ; DI = Y * 4
    add di, dx         ; DI = Y * 320
    add di, ax         ; Add X pixel offset

    ; Adjust DI based on row group every 5 rows
    mov ah, bh         ; AH = row index
    cmp ah, 5
    jb .skip_adjust    ; No adjustment needed for rows 0-4

    ; group = (row / 5) - 1
    xor al, al
    mov al, ah
    xor ah, ah         ; AX = row
    mov bl, 5
    div bl             ; AL = row / 5
    dec al             ; subtract 1
    cmp al, 0
    js .skip_adjust    ; safeguard underflow

    ; Multiply (row group - 1) * 4
    mov bl, 4
    mul bl             ; AX = adjustment
    add di, ax         ; Apply to DI

.skip_adjust:

    ; Draw the 8x8 character at [ES:DI]
    mov cx, 8
.row_loop:
    mov al, [si]
    inc si

    mov bx, di
    mov bp, 0

.next_bit:
    test al, 1
    jz .skip_pixel
    mov byte [es:bx], 0x0F
.skip_pixel:
    inc bx
    inc bp
    shr al, 1
    cmp bp, 8
    jl .next_bit

    add di, 320        ; Go to next row of pixels
    loop .row_loop

    popa
    ret
; ---------------------------------------
; Custom 8x8 Bitmap Font for ASCII 32 to 126
; Each character is 8 bytes
; ---------------------------------------
font8x8:
    ; Space (ASCII 32)
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ; '!' (ASCII 33)
    db 0x18,0x3C,0x3C,0x18,0x18,0x00,0x18,0x00
    ; '"' (ASCII 34)
    db 0x36,0x36,0x12,0x00,0x00,0x00,0x00,0x00
    ; '#' (ASCII 35)
    db 0x36,0x36,0x7F,0x36,0x7F,0x36,0x36,0x00
    ; '$' (ASCII 36)
    db 0x0C,0x3E,0x03,0x1E,0x30,0x1F,0x0C,0x00
    ; '%' (ASCII 37)
    db 0x00,0x63,0x33,0x18,0x0C,0x66,0x63,0x00
    ; '&' (ASCII 38)
    db 0x1C,0x36,0x1C,0x6E,0x3B,0x33,0x6E,0x00
    ; ''' (ASCII 39)
    db 0x06,0x06,0x03,0x00,0x00,0x00,0x00,0x00
    ; '(' (ASCII 40)
    db 0x18,0x0C,0x06,0x06,0x06,0x0C,0x18,0x00
    ; ')' (ASCII 41)
    db 0x06,0x0C,0x18,0x18,0x18,0x0C,0x06,0x00
    ; '*' (ASCII 42)
    db 0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00
    ; '+' (ASCII 43)
    db 0x00,0x0C,0x0C,0x3F,0x0C,0x0C,0x00,0x00
    ; ',' (ASCII 44)
    db 0x00,0x00,0x00,0x00,0x0C,0x0C,0x06,0x00
    ; '-' (ASCII 45)
    db 0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00
    ; '.' (ASCII 46)
    db 0x00,0x00,0x00,0x00,0x0C,0x0C,0x00,0x00
    ; '/' (ASCII 47)
    db 0x60,0x30,0x18,0x0C,0x06,0x03,0x01,0x00
    ; '0' (ASCII 48)
    db 0x3E,0x63,0x73,0x7B,0x6F,0x67,0x3E,0x00
    ; '1' (ASCII 49)
    db 0x0C,0x0E,0x0F,0x0C,0x0C,0x0C,0x3F,0x00
    ; '2' (ASCII 50)
    db 0x1E,0x33,0x30,0x1C,0x06,0x33,0x3F,0x00
    ; '3' (ASCII 51)
    db 0x1E,0x33,0x30,0x1C,0x30,0x33,0x1E,0x00
    ; '4' (ASCII 52)
    db 0x38,0x3C,0x36,0x33,0x7F,0x30,0x78,0x00
    ; '5' (ASCII 53)
    db 0x3F,0x03,0x1F,0x30,0x30,0x33,0x1E,0x00
    ; '6' (ASCII 54)
    db 0x1C,0x06,0x03,0x1F,0x33,0x33,0x1E,0x00
    ; '7' (ASCII 55)
    db 0x3F,0x33,0x30,0x18,0x0C,0x0C,0x0C,0x00
    ; '8' (ASCII 56)
    db 0x1E,0x33,0x33,0x1E,0x33,0x33,0x1E,0x00
    ; '9' (ASCII 57)
    db 0x1E,0x33,0x33,0x3E,0x30,0x18,0x0E,0x00
    ; ':' (ASCII 58)
    db 0x00,0x0C,0x0C,0x00,0x0C,0x0C,0x00,0x00
    ; ';' (ASCII 59)
    db 0x00,0x0C,0x0C,0x00,0x0C,0x0C,0x06,0x00
    ; '<' (ASCII 60)
    db 0x18,0x0C,0x06,0x03,0x06,0x0C,0x18,0x00
    ; '=' (ASCII 61)
    db 0x00,0x00,0x3F,0x00,0x3F,0x00,0x00,0x00
    ; '>' (ASCII 62)
    db 0x06,0x0C,0x18,0x30,0x18,0x0C,0x06,0x00
    ; '?' (ASCII 63)
    db 0x1E,0x33,0x30,0x18,0x0C,0x00,0x0C,0x00
    ; '@' (ASCII 64)
    db 0x3E,0x63,0x7B,0x7B,0x00,0x00,0x00,0x00
    ; 'A' (ASCII 65)
    db 0x0C,0x1E,0x33,0x33,0x3F,0x33,0x33,0x00
    ; 'B' (ASCII 66)
    db 0x3E,0x33,0x33,0x3E,0x33,0x33,0x3E,0x00
    ; 'C' (ASCII 67)
    db 0x1E,0x33,0x03,0x03,0x03,0x33,0x1E,0x00
    ; 'D' (ASCII 68)
    db 0x3E,0x33,0x33,0x33,0x33,0x33,0x3E,0x00
    ; 'E' (ASCII 69)
    db 0x3F,0x03,0x03,0x1F,0x03,0x03,0x3F,0x00
    ; 'F' (ASCII 70)
    db 0x3F,0x03,0x03,0x1F,0x03,0x03,0x03,0x00
    ; 'G' (ASCII 71)
    db 0x1E,0x33,0x03,0x03,0x3B,0x33,0x3E,0x00
    ; 'H' (ASCII 72)
    db 0x33,0x33,0x33,0x3F,0x33,0x33,0x33,0x00
    ; 'I' (ASCII 73)
    db 0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,0x1E,0x00
    ; 'J' (ASCII 74)
    db 0x0F,0x06,0x06,0x06,0x06,0x36,0x1C,0x00
    ; 'K' (ASCII 75)
    db 0x33,0x33,0x1B,0x0F,0x1B,0x33,0x33,0x00
    ; 'L' (ASCII 76)
    db 0x03,0x03,0x03,0x03,0x03,0x03,0x3F,0x00
    ; 'M' (ASCII 77)
    db 0x63,0x77,0x7F,0x6B,0x63,0x63,0x63,0x00
    ; 'N' (ASCII 78)
    db 0x33,0x33,0x3B,0x3F,0x37,0x33,0x33,0x00
    ; 'O' (ASCII 79)
    db 0x1E,0x33,0x33,0x33,0x33,0x33,0x1E,0x00
    ; 'P' (ASCII 80)
    db 0x3E,0x33,0x33,0x3E,0x03,0x03,0x03,0x00
    ; 'Q' (ASCII 81)
    db 0x1E,0x33,0x33,0x33,0x3B,0x1E,0x38,0x00
    ; 'R' (ASCII 82)
    db 0b00011111,0x33,0x33,0x33,0x1B,0x33,0x33,0x00
    ; 'S' (ASCII 83)
    db 0x1E,0x33,0x03,0x1E,0x30,0x33,0x1E,0x00
    ; 'T' (ASCII 84)
    db 0x3F,0x2D,0x0C,0x0C,0x0C,0x0C,0x1E,0x00
    ; 'U' (ASCII 85)
    db 0x33,0x33,0x33,0x33,0x33,0x33,0x1E,0x00
    ; 'V' (ASCII 86)
    db 0x33,0x33,0x33,0x33,0x33,0x1E,0x0C,0x00
    ; 'W' (ASCII 87)
    db 0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x00
    ; 'X' (ASCII 88)
    db 0x33,0x33,0x1E,0x0C,0x1E,0x33,0x33,0x00
    ; 'Y' (ASCII 89)
    db 0x33,0x33,0x33,0x1E,0x0C,0x0C,0x1E,0x00
    ; 'Z' (ASCII 90)
    db 0x3F,0x31,0x18,0x0C,0x06,0x03,0x3F,0x00
    ; '[' (ASCII 91)
    db 0x1E,0x06,0x06,0x06,0x06,0x06,0x1E,0x00
    ; '\' (ASCII 92)
    db 0x03,0x06,0x0C,0x18,0x30,0x60,0x40,0x00
    ; ']' (ASCII 93)
    db 0x1E,0x18,0x18,0x18,0x18,0x18,0x1E,0x00
    ; '^' (ASCII 94)
    db 0x08,0x1C,0x36,0x63,0x00,0x00,0x00,0x00
    ; '_' (ASCII 95)
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	; '_' (ASCII 95)
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF
    ; 'a' (ASCII 97)
    db 0x00,0x00,0x1E,0x30,0x3E,0x33,0x6E,0x00
    ; 'b' (ASCII 98)
    db 0x03,0x03,0x1F,0x33,0x33,0x33,0x1F,0x00
    ; 'c' (ASCII 99)
    db 0x00,0x00,0x1E,0x33,0x03,0x33,0x1E,0x00
    ; 'd' (ASCII 100)
    db 0x30,0x30,0x3E,0x33,0x33,0x33,0x3E,0x00
    ; 'e' (ASCII 101)
    db 0x00,0x00,0x1E,0x33,0x3F,0x03,0x1E,0x00
    ; 'f' (ASCII 102)
    db 0x1C,0x36,0x06,0x0F,0x06,0x06,0x06,0x00
    ; 'g' (ASCII 103)
    db 0x00,0x00,0x3E,0x33,0x33,0x3E,0x30,0x1F
    ; 'h' (ASCII 104)
    db 0x03,0x03,0x1F,0x33,0x33,0x33,0x33,0x00
    ; 'i' (ASCII 105)
    db 0x0C,0x00,0x0E,0x0C,0x0C,0x0C,0x1E,0x00
    ; 'j' (ASCII 106)
    db 0x30,0x00,0x3C,0x30,0x30,0x33,0x33,0x1E
    ; 'k' (ASCII 107)
    db 0x03,0x03,0x33,0x1B,0x0F,0x1B,0x33,0x00
    ; 'l' (ASCII 108)
    db 0x0E,0x0C,0x0C,0x0C,0x0C,0x0C,0x1E,0x00
    ; 'm' (ASCII 109)
    db 0x00,0x00,0x37,0x7F,0x6B,0x63,0x63,0x00
    ; 'n' (ASCII 110)
    db 0x00,0x00,0x1F,0x33,0x33,0x33,0x33,0x00
    ; 'o' (ASCII 111)
    db 0x00,0x00,0x1E,0x33,0x33,0x33,0x1E,0x00
    ; 'p' (ASCII 112)
    db 0x00,0x00,0x1F,0x33,0x33,0x1F,0x03,0x03
    ; 'q' (ASCII 113)
    db 0x00,0x00,0x3E,0x33,0x33,0x3E,0x30,0x30
    ; 'r' (ASCII 114)
    db 0x00,0x00,0x1F,0x33,0x03,0x03,0x07,0x00
    ; 's' (ASCII 115)
    db 0x00,0x00,0x3E,0x03,0x1E,0x30,0x1F,0x00
    ; 't' (ASCII 116)
    db 0x06,0x06,0x0F,0x06,0x06,0x36,0x1C,0x00
    ; 'u' (ASCII 117)
    db 0x00,0x00,0x33,0x33,0x33,0x33,0x3E,0x00
    ; 'v' (ASCII 118)
    db 0x00,0x00,0x33,0x33,0x33,0x1E,0x0C,0x00
    ; 'w' (ASCII 119)
    db 0x00,0x00,0x63,0x63,0x6B,0x7F,0x36,0x00
    ; 'x' (ASCII 120)
    db 0x00,0x00,0x33,0x1E,0x0C,0x1E,0x33,0x00
    ; 'y' (ASCII 121)
    db 0x00,0x00,0x33,0x33,0x33,0x3E,0x30,0x1F
    ; 'z' (ASCII 122)
    db 0x00,0x00,0x3F,0x19,0x0C,0x26,0x3F,0x00
    ; '{' (ASCII 123)
    db 0x38,0x0C,0x0C,0x07,0x0C,0x0C,0x38,0x00
    ; '|' (ASCII 124)
    db 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00
    ; '}' (ASCII 125)
    db 0x07,0x0C,0x0C,0x38,0x0C,0x0C,0x07,0x00
    ; '~' (ASCII 126)
    db 0x6E,0x3B,0x00,0x00,0x00,0x00,0x00,0x00
 
